package com.temenos.t24browser.servlets;

import java.io.*;
import java.util.*;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.temenos.t24.commons.logging.Logger;
import com.temenos.t24.commons.logging.LoggerFactory;
import com.temenos.t24browser.debug.DebugUtils;

// TODO: Auto-generated Javadoc
/**
 * A servlet to aid in the testing of the XSLT Transformations used by Browser.<br>
 * Hitting the page will list all of the xml files in the /WEB-INF/xml/test
 * directory.<br>
 * Clicking on one of these files runs it through the transform and renders the
 * result.<br>
 * When a form on the page is sumitted - which would normally result in a GUI
 * change - the field values posted to the server are displayed (and the GUI
 * change does not take place).
 * <p>
 * Test xml files can be populated automatically by setting the
 * <code>SAVE_XML</code> constant to <code>true</code>.<br>
 * This will result in XML for all the transactions being saved to
 * /WEB-INF/xml/test (via a call to this class from
 * {@link com.temenos.t24browser.comms.InstanceConnector}).
 * 
 * @author dburford
 */
public class DebugServlet extends HttpServlet {


	/** The Constant LOGGER. */
	private static final Logger LOGGER = LoggerFactory.getLogger(DebugServlet.class);
	
	/** SAVE_HTML determines whether the html generated by the transformations will be saved (to allow off line 'static analysis'). */
    private static boolean saveHtml = false;
    
    /** The Constant SAVE_HTML_DESC. */
    private static final String SAVE_HTML_DESC = "Save html";
    
    /** The Constant SAVE_HTML_NAME. */
    private static final String SAVE_HTML_NAME = "SAVE_HTML";

    /** Crude coding alert! Ensure that refresh does not repeat old toggle / delete commands. */
    private static int nonce = 0;
    // Constants
    /** The Constant FILE_TRANSFORM_PARAM. */
    private static final String FILE_TRANSFORM_PARAM = "fileToTransform";
    
    /** The Constant FILE_VIEW_PARAM. */
    private static final String FILE_VIEW_PARAM = "fileToView";
    
    /** The Constant FILE_PROTO_PARAM. */
    private static final String FILE_PROTO_PARAM = "proto";
    
    /** The Constant TOGGLE_PARAM. */
    private static final String TOGGLE_PARAM = "toggleParam";
    
    /** The Constant REMOVE_FILES_PARAM. */
    private static final String REMOVE_FILES_PARAM = "removeFiles";
    
    /** The Constant NONCE_PARAM. */
    private static final String NONCE_PARAM = "nonce";
    
    /** The Constant SHORTCUT_CONFIG_PARAM. */
    private static final String SHORTCUT_CONFIG_PARAM = "config";
    
    /** The Constant BROWSER_SHORTCUT. */
    private static final String BROWSER_SHORTCUT = "browser";
    
    /** The Constant ARC_IB_SHORTCUT. */
    private static final String ARC_IB_SHORTCUT = "arc-ib";
    
    /** The Constant ARC_IB_DEBUG_SHORTCUT. */
    private static final String ARC_IB_DEBUG_SHORTCUT = "arc-ib-debug";

    /**
     * {@inheritDoc} <br>
     * In this case, if a <code>fileToTransform</code> param is set, we
     * transform the specified file via it's associated XSLTs and send back the
     * result. <br>
     * If no file is specified, a page containing a list if all of the test XML
     * files (with links) is returned.
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        Map paramMap = request.getParameterMap();
        String paramTrace = "Debug Servlet - doGet() - params:\n";
        for (Iterator pmIter = paramMap.entrySet().iterator(); pmIter.hasNext(); ) {
            Map.Entry paramEntry = (Map.Entry)pmIter.next();
            paramTrace += (String)(paramEntry.getKey()) + "=" + ((String[])(paramEntry.getValue()))[0] + "\n";
        }
        LOGGER.debug(paramTrace);

        // Crude code to ensure that hitting refresh does not repeat the command
        boolean ignoringRefresh = false;
        String nonceStr = request.getParameter(NONCE_PARAM);
        int specifiedNonce = -1;
        if (nonceStr != null) {
            specifiedNonce = new Integer(nonceStr).intValue();
        }
        if (specifiedNonce > 0) {
            if (specifiedNonce == nonce) {
                // Remove test files if specified
                String removeFiles = request.getParameter(REMOVE_FILES_PARAM);
                if (removeFiles != null && new Boolean(removeFiles).booleanValue()) {
                    DebugUtils.removeTestFiles();
                    init();
                }

                String config = request.getParameter(SHORTCUT_CONFIG_PARAM);
                if (config != null) {
					if (config.equals(BROWSER_SHORTCUT)) {
                            DebugUtils.saveXml = false;
							DebugUtils.ofx = false;
					}
					else if (config.equals(ARC_IB_DEBUG_SHORTCUT)) {
                            DebugUtils.saveXml = false;
                            DebugUtils.ofx = true;
					}
                    else if (config.equals(ARC_IB_SHORTCUT)) {
							DebugUtils.saveXml = false;
							DebugUtils.ofx = true;
					}
				}

                // Toggle global parameters as specified
                String[] paramsToToggle = request.getParameterValues(TOGGLE_PARAM);
                if (paramsToToggle != null) {
                    for (int i = 0; i < paramsToToggle.length; i++) {
                        String paramToToggle = paramsToToggle[i];

                        if (SAVE_HTML_NAME.equals(paramToToggle)) {
                            saveHtml = !saveHtml;
                        } else if (DebugUtils.SAVE_XML_NAME.equals(paramToToggle)) {
                            DebugUtils.saveXml = !DebugUtils.saveXml;
                        } else if (DebugUtils.OFX_NAME.equals(paramToToggle)) {
                            DebugUtils.ofx = !DebugUtils.ofx;
                        }
                    }
                }
            } else {
                ignoringRefresh = true;
            }
        }
        nonce++;
        // Open a file if specified, otherwise provide a list of all files
        String fileToTransform = request.getParameter(FILE_TRANSFORM_PARAM);
        String fileToView = request.getParameter(FILE_VIEW_PARAM);
        ServletContext context = getServletContext();
        PrintWriter out = response.getWriter();

        String isProto = request.getParameter(FILE_PROTO_PARAM);
        File sourceDir = (isProto == null) ? DebugUtils.xmlDirectory : DebugUtils.protoDirectory;

        if (fileToTransform != null) {
            response.setContentType("text/html");

            String htmlString = "";

            // Transform the XML and return it

            if (fileToTransform.endsWith(".xml")) {
                String xml = DebugUtils.readFile(sourceDir, fileToTransform);
                try {
                    String realPath = context.getRealPath("");
                    htmlString = DebugUtils.transformXML(xml, realPath);
                    if (saveHtml) {
                        String htmlFileName = replace(sourceDir + fileToTransform, ".xml", ".html");
                        DebugUtils.saveHTML(htmlFileName, htmlString);
                    }
                    // Insure any form posts come back into this servlet rather than
                    // to the BrowserServlet
                    htmlString = htmlString.replaceAll("BrowserServlet", "DebugServlet");
                } catch (Exception e) {
                    out.println("Exception transforming XML " + e.getMessage());
                    e.printStackTrace();
                }
            }
            else {
                htmlString = DebugUtils.readFile(sourceDir, fileToTransform);
            }

            out.print(htmlString);

        } else if (fileToView != null) {
            if (fileToView.endsWith(".xml")) {
                response.setContentType("text/xml");
            }
            else {
                response.setContentType("text/plain");
            }
            String fileContents = DebugUtils.readFile(sourceDir, fileToView);
            out.print(fileContents);

        } else {
            response.setContentType("text/html");
            // No file specified, list of all of the files in the xml directory
            out.println("<html>");
            writeHead(out);
            out.println("<body>");
            if (ignoringRefresh) {
                out.println("<i>Ignoring refreshed command</i><p>");
            }
            writeTestXmlFiles(out);
            out.println("</body></html>");
        }
        out.close();
    }

    /**
     * {@inheritDoc} <br>
     * In this case, we build a page containing all parameters in the request
     * follwed by a list of all of the test files.
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        out.println("<html>");
        writeHead(out);
        out.println("<body>");
        writeFormFields(request, out);
        out.println("<p><p>");
        writeTestXmlFiles(out);
        out.println("</body></html>");
    }

    /**
     * {@inheritDoc}
     */
    public void init() throws ServletException {
        ServletContext context = getServletContext();
        DebugUtils.init(context.getRealPath(""));
    }

    /**
     * Write all of the parameters in the specified HttpServletRequest to the
     * page.<br>
     * 
     * @param out the writer for this page
     * @param request the HttpServletRequest whose parameters to list
     */
    private void writeFormFields(HttpServletRequest request, PrintWriter out) {

        out.println("<table><tr><th>param name</th><th class='boldright'>param value</th><th>param name</th><th>param value</th></tr>");

        Enumeration enm = request.getParameterNames();
        // Use a four col table to save space (name | value || name | value)
        boolean newRow = true;
        for (; enm.hasMoreElements();) {
            if (newRow) {
                out.println("<tr>");
            }
            String name = (String) enm.nextElement();
            out.println("<td class='name'>" + name + "</td>");
            if (!newRow) {
                out.println("<td>");
            } else {
                out.println("<td class='boldright'>");
            }
            String[] values = request.getParameterValues(name);
            for (int i = 0; i < values.length; i++) {
                if (i > 0) {
                    out.println(", ");
                }
                out.println(values[i]);
            }
            out.println("</td>");
            if (!newRow) {
                out.println("</tr>");
            }
            newRow = !newRow;
        }
        if (!newRow) {
            out.println("<td></td><td></td>");
        }
        out.println("</table>");
    }

    /**
     * Write the head section of the page.
     * 
     * @param out the writer for this page
     */
    private void writeHead(PrintWriter out) {
        StringBuffer buff = new StringBuffer();
        buff.append("<head>\n<title>Browser Test Servlet</title>\n");
        buff.append("<style>\n");
        buff.append("table { border-collapse: collapse; font-size: small; }");
        buff.append("th {border-style: dotted; border-width: 1px; background-color: rgb(230, 220, 210);font-weight: bolder;}");
        buff.append("td {border-style: dotted; border-width: 1px; background-color: rgb(250, 240, 230);}");
        buff.append("td.name {font-weight: bold; font-style:italic;}");
        buff.append("td.boldright {border-style: dotted solid dotted dotted;}");
        buff.append("th.boldright {border-style: dotted solid dotted dotted;}");
        buff.append("\n</style>\n");
        buff.append("<script>\nvar debugUrl = 'DebugServlet?';\n");
        buff.append("function toggle(param, nonce) {\ncallDebug('" + TOGGLE_PARAM + "=' + param + '&" + NONCE_PARAM + "=' + nonce);\n}\n");
        buff.append("function set(param, nonce) {\ncallDebug(param + '=true&" + NONCE_PARAM + "=' + nonce);\n}\n");
        buff.append("function render(file) {\ncallDebug('" + FILE_TRANSFORM_PARAM + "=' + file);\n}\n");
        buff.append("function renderProto(file) {\ncallDebug('" + FILE_TRANSFORM_PARAM + "=' + file + '&proto=true');\n}\n");
        buff.append("function view(file) {\ncallDebug('" + FILE_VIEW_PARAM + "=' + file);\n}\n");
        buff.append("function viewProto(file) {\ncallDebug('" + FILE_VIEW_PARAM + "=' + file + '&proto=true');\n}\n");
        buff.append("function callDebug(paramStr) {\nwindow.location=debugUrl + paramStr;\n}\n");
        buff.append("</script>\n");
        buff.append("</head>\n");
        out.println(buff.toString());
    }

    /**
     * Write a list of all test xml files to this page.<br>
     * The files will be added as links, which will invoke their transform when
     * clicked.
     * 
     * @param out the writer for this page
     */
    private void writeTestXmlFiles(PrintWriter out) {

		// 'shortcut' configurations
        out.println("<p><strong><i>Shortcut Configurations: </i></strong><br>");
		out.println("<a href=DebugServlet?" + SHORTCUT_CONFIG_PARAM + "=" + BROWSER_SHORTCUT + "&" + NONCE_PARAM + "=" + nonce + ">Internal Browser configuration</a>");
		out.println("<br><a href=DebugServlet?" + SHORTCUT_CONFIG_PARAM + "=" + ARC_IB_SHORTCUT + "&" + NONCE_PARAM + "=" + nonce + ">ARC-IB configuration</a>");
		out.println("<br><a href=DebugServlet?" + SHORTCUT_CONFIG_PARAM + "=" + ARC_IB_DEBUG_SHORTCUT + "&" + NONCE_PARAM + "=" + nonce + ">ARC-IB debugging configuration</a>");

        // settings title and list of checkboxes for toggling arc-ib params
        out.println("<p><strong><i>Browser Debug Settings: </i></strong><br>");

        writeVariableState(out, SAVE_HTML_DESC, SAVE_HTML_NAME, saveHtml);
        writeVariableState(out, DebugUtils.SAVE_XML_DESC, DebugUtils.SAVE_XML_NAME, DebugUtils.saveXml);
        writeVariableState(out, DebugUtils.OFX_DESC, DebugUtils.OFX_NAME, DebugUtils.ofx);
        
        out.println("</p>");

        // test folder title + trash button
        out.println("<p><i><strong>Files in Test Folder (reverse sorted):</strong> " + DebugUtils.xmlDirectory + "</i></p>");

        out.println("<p><button name=\"" + REMOVE_FILES_PARAM + "\" onclick=\"set(this.name, " + nonce + ");\">Trash files</button></p>");

        // Now deal with any saved test files, adding action options as appropriate
        File[] xmlFileList = DebugUtils.xmlDirectory.listFiles(new FilenameFilter () {
                    public boolean accept(File dir, String name) {
                        return name.endsWith(".xml");
                    }
                }
            );


        if (xmlFileList != null && xmlFileList.length > 0) {

            out.println("<div padding=\"5\"><table style=\"font-size: 14px; font-family: Verdana;\" cellpadding=\"4\">");

            // latest first
            Arrays.sort(xmlFileList, Collections.reverseOrder());

            for (int i = 0; i < xmlFileList.length; i++) {
                String fileName = xmlFileList[i].getName();
                String fileNameNoSuffix = fileName.substring(0, fileName.length() - 4);
                String filePath = xmlFileList[i].toString();

                if (fileName.indexOf("_HTTP_PARAMS") >= 0) {
                    continue;
                }

                String fileLine;                
                String paramFileName = replace(fileName, "_REQUEST", "_HTTP_PARAMS");
                if (! paramFileName.equals(fileName)) {
                    // got request XML
                    fileLine = "<tr><td>" + fileNameNoSuffix + "</td>";
                    fileLine += "<td><button name=\"view xml\" onclick=\"view('" + fileName + "');\">View Request XML</button></td>";
                    fileLine += "<td><button name=\"render xml\" onclick=\"view('" + paramFileName + "')\">View Params as XML</button></td>";
                }
                else {                    
                    fileLine = "<tr><td>" + fileNameNoSuffix + "</td>";
                    fileLine += "<td><button name=\"render xml\" onclick=\"render('" + fileName + "')\">Render XML</button></td>";
                    fileLine += "<td><button name=\"view xml\" onclick=\"view('" + fileName + "');\">View XML Source</button></td>";
                }

                // Check for converted HTML
                File htmlFile = new File (filePath.substring(0, filePath.length() - 4) + ".html");

                System.err.println("HTML file? " + htmlFile);

                if (htmlFile.exists()) {
                    fileLine += "<td><button name=\"display html\" onclick=\"render('" + htmlFile.getName() + "')\">Display HTML</button></td>";
                    fileLine += "<td><button name=\"view html\" onclick=\"view('" + htmlFile.getName() + "')\">View HTML Source</button></td>";
                }
                else {
                    fileLine += "<td></td><td></td>";
                }
                out.println(fileLine + "</tr>");
            }
            out.println("</table></div>");
        }
        
        // proto folder title
        out.println("<p><i><strong>Files in Proto Folder (sorted):</strong> " + DebugUtils.protoDirectory + "</i></p>");

        // Now deal with any saved test files, adding action options as appropriate
        File[] xmlFiles = DebugUtils.protoDirectory.listFiles(new FilenameFilter () {
                public boolean accept(File dir, String name) {
                    return name.endsWith(".xml");
                }
            }
        );

        List protoFileList = Arrays.asList(xmlFiles);

        if (protoFileList.size() > 0) {

            Collections.sort(protoFileList);

            out.println("<div padding=\"5\"><table style=\"font-size: 14px; font-family: Verdana;\" cellpadding=\"4\">");

            for (Iterator protoIter = protoFileList.iterator(); protoIter.hasNext();) {
                String fileName = ((File)protoIter.next()).getName();
                
                String fileNameNoSuffix = fileName.substring(0, fileName.length() - 4);

                String fileLine = "<tr><td>" + fileNameNoSuffix + "</td>";
                fileLine += "<td><button name=\"render xml\" onclick=\"renderProto('" + fileName + "')\">Render XML</button></td>";
                fileLine += "<td><button name=\"view xml\" onclick=\"viewProto('" + fileName + "');\">View XML Source</button></td>";

                fileLine += "<td></td><td></td>";
                out.println(fileLine + "</tr>");
            }
            out.println("</table></div>");
        }

    }

    /**
     * Print the value of a field, add links to change it's state.
     * 
     * @param out the out
     * @param varDesc the var desc
     * @param varName the var name
     * @param varValue the var value
     */
    private void writeVariableState(PrintWriter out, String varDesc, String varName, boolean varValue) {
        out.print("<br><input type=\"checkbox\" name=\"" + varName + "\" onchange=\"toggle(this.name, " + nonce + ");\"");
        out.print(varValue ? " checked=\"checked\" " : " ");
        out.println("/>  <i>" + varDesc + "</i>");
    }

    /**
     * Simple replace method (compatable with Java 1.4)
     * 
     * @param str the str
     * @param pattern the pattern
     * @param replace the replace
     * 
     * @return the string
     */
    public static String replace(String str, String pattern, String replace) {
		// We can use String.replace if we move to Java 5
        int s = 0;
        int e = 0;
        StringBuffer result = new StringBuffer();

        while ((e = str.indexOf(pattern, s)) >= 0) {
            result.append(str.substring(s, e));
            result.append(replace);
            s = e+pattern.length();
        }
        result.append(str.substring(s));
        return result.toString();
    }
}


